const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function main() {
  const ci = '10541058'
  const passwordHash = await bcrypt.hash(ci, 12)

  // Ensure customer slug and razon social
  const razonSocial = 'nuwedev'
  const slug = 'nuwedev'

  // Find or create customer with fixed id (uuid generated by DB if not provided)
  let customer = await prisma.customer.findFirst({ where: { OR: [{ slug }, { razonSocial }] } })
  if (!customer) {
    customer = await prisma.customer.create({
      data: {
        userId: 'admin',
        razonSocial,
        slug,
        ci,
        nombre: 'Nuwe',
        apellido: 'Dev',
        email: 'nuwedev@example.com',
        password: passwordHash,
        isActive: true,
      },
    })
  }

  // Ensure branch Principal
  let branch = await prisma.branch.findFirst({ where: { customerId: customer.id } })
  if (!branch) {
    branch = await prisma.branch.create({
      data: {
        customerId: customer.id,
        name: 'Principal',
        isActive: true,
      },
    })
  }

  // Ensure RoleSas Administrador
  let role = await prisma.roleSas.findFirst({ where: { customerId: customer.id, nombre: 'Administrador' } })
  if (!role) {
    role = await prisma.roleSas.create({
      data: {
        nombre: 'Administrador',
        descripcion: 'Rol de administrador del sistema',
        customerId: customer.id,
        isActive: true,
      },
    })
  }

  // Ensure UsuarioSas with CI 10541058
  let usuario = await prisma.usuarioSas.findFirst({ where: { customerId: customer.id, ci } })
  if (!usuario) {
    usuario = await prisma.usuarioSas.create({
      data: {
        ci,
        nombre: 'Admin',
        apellido: 'SAS',
        correo: 'admin.sas@nuwedev.com',
        contraseña: passwordHash,
        rolId: role.id,
        sucursalId: branch.id,
        customerId: customer.id,
        isActive: true,
      },
    })
  }

  // Ensure Subscription plan and active subscription (trial)
  let plan = await prisma.subscriptionPlan.findFirst({ where: { name: 'Trial' } })
  if (!plan) {
    plan = await prisma.subscriptionPlan.create({
      data: {
        name: 'Trial',
        description: 'Plan de prueba',
        hasMonthly: false,
        hasYearly: false,
        isActive: true,
      },
    })
  }

  const existingSub = await prisma.subscription.findFirst({
    where: {
      customerId: customer.id,
      status: { in: ['active', 'trial'] },
      OR: [{ endDate: null }, { endDate: { gt: new Date() } }],
    },
  })
  if (!existingSub) {
    await prisma.subscription.create({
      data: {
        customerId: customer.id,
        planId: plan.id,
        status: 'trial',
        billingPeriod: 'monthly',
        startDate: new Date(),
        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
        autoRenew: false,
      },
    })
  }

  console.log('✅ Cliente nuwedev listo para login SAS')
  console.log('URL:', `http://localhost:3000/${slug}/login`)
  console.log('CI:', ci, ' Password:', ci)
}

main()
  .catch((e) => {
    console.error('❌ Error:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
